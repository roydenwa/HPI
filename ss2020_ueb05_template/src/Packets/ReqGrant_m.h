//
// Generated file, do not edit! Created by nedtool 5.6 from Packets/ReqGrant.msg.
//

#ifndef __REQGRANT_M_H
#define __REQGRANT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>Packets/ReqGrant.msg:21</tt> by nedtool.
 * <pre>
 * enum Type
 * {
 *     REQUEST = 0;
 *     GRANT = 1;
 *     RELEASE = 2;
 * }
 * </pre>
 */
enum Type {
    REQUEST = 0,
    GRANT = 1,
    RELEASE = 2
};

/**
 * Class generated from <tt>Packets/ReqGrant.msg:28</tt> by nedtool.
 * <pre>
 * packet ReqGrant
 * {
 *     int type \@enum(Type);
 *     int source;
 *     int outports;
 * }
 * </pre>
 */
class ReqGrant : public ::omnetpp::cPacket
{
  protected:
    int type;
    int source;
    int outports;

  private:
    void copy(const ReqGrant& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ReqGrant&);

  public:
    ReqGrant(const char *name=nullptr, short kind=0);
    ReqGrant(const ReqGrant& other);
    virtual ~ReqGrant();
    ReqGrant& operator=(const ReqGrant& other);
    virtual ReqGrant *dup() const override {return new ReqGrant(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getOutports() const;
    virtual void setOutports(int outports);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ReqGrant& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ReqGrant& obj) {obj.parsimUnpack(b);}


#endif // ifndef __REQGRANT_M_H

