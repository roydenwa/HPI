//
// Generated file, do not edit! Created by nedtool 5.6 from Packets/FlitHead.msg.
//

#ifndef __FLITHEAD_M_H
#define __FLITHEAD_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "Flit_m.h"
// }}

/**
 * Class generated from <tt>Packets/FlitHead.msg:21</tt> by nedtool.
 * <pre>
 * packet FlitHead extends Flit
 * {
 *     int source;
 *     int destination;
 *     int type = FLIT_HEAD;
 *     int hopCnt;
 * }
 * </pre>
 */
class FlitHead : public ::Flit
{
  protected:
    int source;
    int destination;
    int type;
    int hopCnt;

  private:
    void copy(const FlitHead& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FlitHead&);

  public:
    FlitHead(const char *name=nullptr, short kind=0);
    FlitHead(const FlitHead& other);
    virtual ~FlitHead();
    FlitHead& operator=(const FlitHead& other);
    virtual FlitHead *dup() const override {return new FlitHead(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSource() const;
    virtual void setSource(int source);
    virtual int getDestination() const;
    virtual void setDestination(int destination);
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getHopCnt() const;
    virtual void setHopCnt(int hopCnt);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FlitHead& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FlitHead& obj) {obj.parsimUnpack(b);}


#endif // ifndef __FLITHEAD_M_H

