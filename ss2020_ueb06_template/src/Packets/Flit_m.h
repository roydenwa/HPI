//
// Generated file, do not edit! Created by nedtool 5.6 from Packets/Flit.msg.
//

#ifndef __FLIT_M_H
#define __FLIT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>Packets/Flit.msg:20</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * enum FlitType_t
 * {
 *     FLIT_DATA = 0;
 *     FLIT_HEAD = 1;
 *     FLIT_TAIL = 2;
 * }
 * </pre>
 */
enum FlitType_t {
    FLIT_DATA = 0,
    FLIT_HEAD = 1,
    FLIT_TAIL = 2
};

/**
 * Class generated from <tt>Packets/Flit.msg:25</tt> by nedtool.
 * <pre>
 * packet Flit
 * {
 *     int type \@enum(FlitType_t);
 *     int seqnum;
 *     char payload[];
 * }
 * </pre>
 */
class Flit : public ::omnetpp::cPacket
{
  protected:
    int type;
    int seqnum;
    char *payload; // array ptr
    unsigned int payload_arraysize;

  private:
    void copy(const Flit& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Flit&);

  public:
    Flit(const char *name=nullptr, short kind=0);
    Flit(const Flit& other);
    virtual ~Flit();
    Flit& operator=(const Flit& other);
    virtual Flit *dup() const override {return new Flit(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getSeqnum() const;
    virtual void setSeqnum(int seqnum);
    virtual void setPayloadArraySize(unsigned int size);
    virtual unsigned int getPayloadArraySize() const;
    virtual char getPayload(unsigned int k) const;
    virtual void setPayload(unsigned int k, char payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Flit& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Flit& obj) {obj.parsimUnpack(b);}


#endif // ifndef __FLIT_M_H

